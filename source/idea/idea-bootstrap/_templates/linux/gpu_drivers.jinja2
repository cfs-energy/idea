# Begin: Install GPU Drivers - Is GPU Instance Type: {{ context.is_gpu_instance_type() }}
{% if context.is_gpu_instance_type() %}
{% if context.is_nvidia_gpu() %}

{% if context.base_os in ('amazonlinux2023',) %}
  dnf check-release-update
  dnf update -y
  dnf install -y dkms
  systemctl enable --now dkms
  if (uname -r | grep -q ^6.12.); then
    dnf install -y kernel-devel-$(uname -r)  kernel6.12-modules-extra
  else
    dnf install -y kernel-devel-$(uname -r)  kernel-modules-extra
  fi
{% endif %}

function install_nvidia_grid_drivers () {
  which nvidia-smi > /dev/null 2>&1
  if [[ "$?" == "0" ]]; then
    log_info "GPU driver already installed. Skip."
    return 0
  fi

  log_info "Installing NVIDIA GRID Drivers"
  mkdir -p /root/bootstrap/gpu_drivers
  pushd /root/bootstrap/gpu_drivers

  local AWS=$(command -v aws)

  # Check if we're in a GovCloud region
  if [[ -f /etc/environment ]] && grep -q "AWS_REGION=.*gov" /etc/environment; then
    local DRIVER_BUCKET_REGION=$(grep "AWS_REGION=" /etc/environment | cut -d= -f2 | tr -d '"')
    log_info "Detected GovCloud region: ${DRIVER_BUCKET_REGION}"
  else
    # Special handling for Amazon Linux 2 with kernel 4.14
    if [[ $(uname -a) =~ "amzn2" ]] && [[ $(uname -r) =~ ^4.14 ]]; then
      log_info "Detected Amazon Linux 2 with kernel 4.14, using specific GRID driver path"
      local DRIVER_BUCKET_REGION=$(curl -s --head {{ context.config.get_string('global-settings.gpu_settings.nvidia.linux.s3_bucket_url', required=True) }} | grep bucket-region | awk '{print $2}' | tr -d '\r\n')
      $AWS --region ${DRIVER_BUCKET_REGION} s3 cp --quiet --recursive s3://ec2-linux-nvidia-drivers/grid-17.1/ .
      popd
      return 0
    else
      local DRIVER_BUCKET_REGION=$(curl -s --head {{ context.config.get_string('global-settings.gpu_settings.nvidia.linux.s3_bucket_url', required=True) }} | grep bucket-region | awk '{print $2}' | tr -d '\r\n')
    fi
  fi

  $AWS --region ${DRIVER_BUCKET_REGION} s3 cp --quiet --recursive {{ context.config.get_string('global-settings.gpu_settings.nvidia.linux.s3_bucket_path', required=True) }} .

  local x_server_pid=$(cat /tmp/.X0-lock)
  if [[ ! -z "${x_server_pid}" ]]; then
    kill $x_server_pid
  fi

  if [[ $(uname -a) =~ "amzn2" ]] && [[ $(uname -r) =~ ^5.10 ]]
  then
      CC=/usr/bin/gcc10-cc /bin/sh NVIDIA-Linux-x86_64*.run --no-precompiled-interface --run-nvidia-xconfig --no-questions --accept-license --dkms --silent
  else
      /bin/sh NVIDIA-Linux-x86_64*.run --no-precompiled-interface --run-nvidia-xconfig --no-questions --accept-license --dkms --silent
  fi

  log_info "X server configuration for GPU start..."
  local NVIDIAXCONFIG=$(which nvidia-xconfig)
  $NVIDIAXCONFIG --preserve-busid --enable-all-gpus
  log_info "X server configuration for GPU end..."
  set_reboot_required "Installed NVIDIA Grid Driver"
  popd
  sudo touch /etc/modprobe.d/nvidia.conf
  echo "options nvidia NVreg_EnableGpuFirmware=0" | tee --append /etc/modprobe.d/nvidia.conf
}

function install_nvidia_public_drivers() {
  which nvidia-smi > /dev/null 2>&1
  if [[ "$?" == "0" ]]; then
    log_info "GPU driver already installed. Skip."
    return 0
  fi

  # Instance    Product Type    Product Series  Product
  # G2        GRID          GRID Series     GRID K520
  # G3/G3s    Tesla         M-Class         M60
  # G4dn      Tesla         T-Series          T4
  # G5        Tesla         A-Series          A10 - G5  (instances require driver version 470.00 or later)
  # G5g       Tesla         T-Series          NVIDIA T4G  (G5g instances require driver version 470.82.01 or later. The operating systems is Linux aarch64)
  # P2        Tesla         K-Series          K80
  # P3        Tesla         V-Series          V100
  # P4d       Tesla         A-Series          A100 (320 GB HBM2 GPU memory)
  # P4de      Tesla         A-Series          A100 (640 GB HBM2e GPU memory)
  # P5        Tesla         H-Series        H100 (640 GB HBM3 GPU memory)

  local DRIVER_VERSION="{{ context.get_nvidia_gpu_driver_version() }}"

  mkdir -p /root/bootstrap/gpu_drivers
  pushd /root/bootstrap/gpu_drivers

  local MACHINE=$(uname -m)
  curl -fSsl -O https://us.download.nvidia.com/tesla/${DRIVER_VERSION}/NVIDIA-Linux-${MACHINE}-${DRIVER_VERSION}.run

  local x_server_pid=$(cat /tmp/.X0-lock)
  if [[ ! -z "${x_server_pid}" ]]; then
    kill $x_server_pid
  fi

  if [[ $(uname -a) =~ "amzn2" ]] && [[ $(uname -r) =~ ^5.10 ]]
  then
      CC=/usr/bin/gcc10-cc /bin/sh NVIDIA-Linux-${MACHINE}-${DRIVER_VERSION}.run -q -a -n -s --dkms
  else
      /bin/sh NVIDIA-Linux-${MACHINE}-${DRIVER_VERSION}.run -q -a -n -s --dkms
  fi
  log_info "X server configuration for GPU start..."
  local NVIDIAXCONFIG=$(which nvidia-xconfig)
  $NVIDIAXCONFIG --preserve-busid --enable-all-gpus
  log_info "X server configuration for GPU end..."
  set_reboot_required "Installed NVIDIA Public Driver"

  popd
}
{% elif context.is_amd_gpu()  %}
function install_amd_gpu_drivers() {
  which /opt/amdgpu-pro/bin/clinfo > /dev/null 2>&1
  if [[ "$?" == "0" ]]; then
    log_info "GPU driver already installed. Skip."
    return 0
  fi

  #
  # Instance GPU
  # G4ad     Radeon Pro V520
  #
  mkdir -p /root/bootstrap/gpu_drivers
  pushd /root/bootstrap/gpu_drivers

  # Enforce pbs stop to avoid pbs restart during amdgpupro install
  systemctl stop pbs

  {% if context.base_os in ('rocky8', 'rocky9') %}
    local AMD_RADEON_REPO_BASE_URL="https://repo.radeon.com/amdgpu"
    local AMD_GPU_VERSION="6.4.1"
    local OS_VERSION=$(awk -F= '/^VERSION_ID/ {gsub(/"/, "", $2); print $2}' /etc/os-release)
    log_info "Detected OS Version ${OS_VERSION}, using AMD GPU version ${AMD_GPU_VERSION}"

    local RHEL_ROCKY_INSTALLER_URL="${AMD_RADEON_REPO_BASE_URL}/${AMD_GPU_VERSION}/el/${OS_VERSION}/main/x86_64/"

    # Install wget if not available
    if ! command -v wget &> /dev/null; then
      log_info "Installing wget"
      {% if context.base_os in ('rocky8', 'rocky9') %}
      yum install -y wget
      {% endif %}
    fi

    log_info "Downloading amdgpu-install RPM from ${RHEL_ROCKY_INSTALLER_URL}"
    wget -r -l1 --no-parent -A "amdgpu-install-*.noarch.rpm" ${RHEL_ROCKY_INSTALLER_URL}

    # Find RPM and install it
    local AMD_GPU_RPM=$(echo "${RHEL_ROCKY_INSTALLER_URL#https://}amdgpu-install-*.noarch.rpm")
    log_info "Installing RPM ${AMD_GPU_RPM}"
    yum localinstall -y $(ls ${AMD_GPU_RPM})

    # Install vulkan packages
    yum install -y --skip-broken vulkan vulkan-amdgpu vulkan-headers vulkan-loader-devel vulkan-tools vulkan-validation-layers

    # Install additional AMD GPU RPMs
    log_info "Downloading additional AMD GPU RPMs"
    wget -r -l1 --no-parent -A "libdrm-amdgpu-common-*.rpm" ${RHEL_ROCKY_INSTALLER_URL}
    wget -r -l1 --no-parent -A "libdrm-amdgpu-*.rpm" ${RHEL_ROCKY_INSTALLER_URL}
    wget -r -l1 --no-parent -A "xorg-x11-amdgpu-drv-amdgpu-*.rpm" ${RHEL_ROCKY_INSTALLER_URL}

    # Find and install additional AMD GPU RPMs
    local LIBDRM_AMDGPU_COMMON_RPM=$(echo "${RHEL_ROCKY_INSTALLER_URL#https://}libdrm-amdgpu-common-*.rpm")
    local LIBDRM_AMDGPU_RPM=$(echo "${RHEL_ROCKY_INSTALLER_URL#https://}libdrm-amdgpu-*.rpm")
    local XORG_AMDGPU_RPM=$(echo "${RHEL_ROCKY_INSTALLER_URL#https://}xorg-x11-amdgpu-drv-amdgpu-*.rpm")

    log_info "Installing additional AMD GPU RPMs"
    yum localinstall -y $(ls ${LIBDRM_AMDGPU_COMMON_RPM})
    yum localinstall -y $(ls ${LIBDRM_AMDGPU_RPM})
    yum localinstall -y $(ls ${XORG_AMDGPU_RPM})

    log_info "Running amdgpu-install"
    /bin/amdgpu-install --usecase=workstation --accept-eula -y

  {% else %}
    log_error "AMD GPU drivers are only supported on Rocky Linux 8 and 9"
    return 1
  {% endif %}

  set_reboot_required "Installed AMD GPU Driver"

  # Configure X11 for DCV nodes
  {% if node_type == "dcv" %}
    mkdir -p /etc/X11/
    echo """Section \"ServerLayout\"
    Identifier     \"Layout0\"
    Screen          0 \"Screen0\"
    InputDevice     \"Keyboard0\" \"CoreKeyboard\"
    InputDevice     \"Mouse0\" \"CorePointer\"
EndSection
Section \"Files\"
    ModulePath \"/opt/amdgpu/lib64\"
    ModulePath \"/opt/amdgpu/lib64/xorg/modules/drivers\"
    ModulePath \"/opt/amdgpu/lib/xorg/modules/drivers\"
    ModulePath \"/opt/amdgpu-pro/lib/xorg/modules/extensions\"
    ModulePath \"/opt/amdgpu-pro/lib64/xorg/modules/extensions\"
    ModulePath \"/opt/amdgpu-pro/lib64\"
    ModulePath \"/usr/lib64/xorg/modules\"
    ModulePath \"/usr/lib/xorg/modules\"
EndSection
Section \"InputDevice\"
    # generated from default
    Identifier     \"Mouse0\"
    Driver         \"mouse\"
    Option         \"Protocol\" \"auto\"
    Option         \"Device\" \"/dev/psaux\"
    Option         \"Emulate3Buttons\" \"no\"
    Option         \"ZAxisMapping\" \"4 5\"
EndSection
Section \"InputDevice\"
    # generated from default
    Identifier     \"Keyboard0\"
    Driver         \"kbd\"
EndSection
Section \"Monitor\"
    Identifier     \"Monitor0\"
    VendorName     \"Unknown\"
    ModelName      \"Unknown\"
EndSection
Section \"Device\"
    Identifier     \"Device0\"
    Driver         \"amdgpu\"
    VendorName     \"AMD\"
    BoardName      \"Radeon MxGPU V520\"
    BusID          \"PCI:0:30:0\"
EndSection
Section \"Extensions\"
    Option         \"DPMS\" \"Disable\"
EndSection
Section \"Screen\"
    Identifier     \"Screen0\"
    Device         \"Device0\"
    Monitor        \"Monitor0\"
    DefaultDepth   24
    Option         \"AllowEmptyInitialConfiguration\" \"True\"
    SubSection \"Display\"
        Virtual    3840 2160
        Depth      32
    EndSubSection
EndSection
"""> /etc/X11/xorg.conf
  {% endif %}
  popd
}
{% endif %}

function install_gpu_drivers () {

  # Identify Instance Type and Instance Family and install applicable GPU Drivers
  #
  # Types of Drivers:
  # * Tesla drivers
  #   These drivers are intended primarily for compute workloads, which use GPUs for computational tasks such as parallelized floating-point
  #   calculations for machine learning and fast Fourier transforms for high performance computing applications.
  # * GRID drivers
  #   These drivers are certified to provide optimal performance for professional visualization applications that render content such
  #   as 3D models or high-resolution videos.

  local NODE_TYPE="{{ node_type }}"

  local INSTANCE_TYPE=$(instance_type)
  local INSTANCE_FAMILY=$(instance_family)

  local MACHINE=$(uname -m)
  log_info "Detected GPU instance type: ${INSTANCE_TYPE}. Installing GPU Drivers ..."

  # refer to: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/install-nvidia-driver.html
  # Available drivers by instance type for Tesla vs Grid mapping.
  # we'll use NODE_TYPE="dcv" to install Grid drivers and NODE_TYPE="compute" to install Tesla drivers.
  case ${INSTANCE_FAMILY} in
    p5)
      log_info "AMD / NVIDIA H100"
      # Tesla driver: Yes, GRID driver: No
      install_nvidia_public_drivers
      ;;
    p4d|p4de)
      log_info "Intel / NVIDIA A100"
      # Tesla driver: Yes, GRID driver: No
      install_nvidia_public_drivers
      ;;
    p3)
      log_info "Intel / NVIDIA Tesla V100"
      # Tesla driver: Yes, GRID driver: Yes (Using Marketplace AMIs only)
      if [[ ${NODE_TYPE} == "dcv" ]]; then
        install_nvidia_grid_drivers
      else
        install_nvidia_public_drivers
      fi
      ;;
    p2)
      log_info "Intel / NVIDIA K80"
      # Tesla driver: Yes, GRID driver: No
      install_nvidia_public_drivers
      ;;
    g5)
      log_info "AMD / NVIDIA A10G"
      # Tesla driver: Yes, GRID driver: Yes
      if [[ ${NODE_TYPE} == "dcv" ]]; then
        install_nvidia_grid_drivers
      else
        install_nvidia_public_drivers
      fi
      ;;
    g6)
      log_info "Intel / NVIDIA L4"
      # Tesla driver: Yes, GRID driver: Yes
      if [[ ${NODE_TYPE} == "dcv" ]]; then
        install_nvidia_grid_drivers
      else
        install_nvidia_public_drivers
      fi
      ;;
    g6e)
      log_info "Intel / NVIDIA L4"
      # Tesla driver: Yes, GRID driver: Yes
      if [[ ${NODE_TYPE} == "dcv" ]]; then
        install_nvidia_grid_drivers
      else
        install_nvidia_public_drivers
      fi
      ;;
    g6f)
      log_info "Intel / NVIDIA L4"
      # Tesla driver: Yes, GRID driver: Yes
      if [[ ${NODE_TYPE} == "dcv" ]]; then
        install_nvidia_grid_drivers
      else
        install_nvidia_public_drivers
      fi
      ;;
    g5g)
      log_info "Arm / NVIDIA T4G"
      # Tesla driver: Yes, GRID driver: No
      # This Tesla driver also supports optimized graphics applications specific to the ARM64 platform
      install_nvidia_public_drivers
      ;;
    g4dn)
      log_info "Intel / NVIDIA T4"
      # Tesla driver: Yes, GRID driver: Yes
      if [[ ${NODE_TYPE} == "dcv" ]]; then
        install_nvidia_grid_drivers
      else
        install_nvidia_public_drivers
      fi
      ;;
    g4ad)
      log_info "AMD / AMD Radeon Pro V520"
      install_amd_gpu_drivers
      ;;
    g3|g3s)
      log_info "Intel / NVIDIA Tesla M60"
      # Tesla driver: Yes, GRID driver: Yes
      if [[ ${NODE_TYPE} == "dcv" ]]; then
        install_nvidia_grid_drivers
      else
        install_nvidia_public_drivers
      fi
      ;;
    g2)
      log_info "Intel / NVIDIA Tesla M60"
      # Tesla driver: Yes, GRID driver: No
      install_nvidia_public_drivers
      ;;
  esac
}

install_gpu_drivers
{% if context.base_os in ('ubuntu2204', 'ubuntu2404') %}
sed -i '/^Section\ "Device"/a \ \ \ \ \option \ \ \ \ \ \ \ \ "HardDPMS" "false"' /etc/X11/xorg.conf
{% endif %}
{% else %}
log_info "GPU InstanceType not detected. Skip."
{% endif %}
# End: Install GPU Drivers
